<link href="//fonts.googleapis.com/css?family=Noto+Sans:400,700,400italic,700italic" rel="stylesheet" type="text/css"/>
<link href="//fonts.googleapis.com/css?family=Libre+Baskerville:700" rel="stylesheet" type="text/css"/><style>
      body {
        margin: 0 !important ;
      }
      stat-block {
        /* A bit of margin for presentation purposes, to show off the drop
        shadow. */
        margin-left: 20px !important ;
        margin-top: 20px !important ;
      }
    </style>
    <script>
      function createCustomElement(name, contentNode, elementClass = null) {
        if(elementClass === null) {
          customElements.define(name,
            class extends HTMLElement {
              constructor() {
                super()
                this.attachShadow({mode: 'open'})
                  .appendChild(contentNode.cloneNode(true))
              }
            }
          )
        } else {
          customElements.define(name, elementClass(contentNode))
        }
      }
    </script></head><body><template id="stat-block"><style>
        .bar {
          height: 5px !important ;
          background: #E69A28 !important ;
          border: 1px solid #000 !important ;
          position: relative !important ;
          z-index: 1 !important ;
        }
        :host {
          display: inline-block !important ;
        }
        #content-wrap {
          font-family: 'Noto Sans', 'Myriad Pro', Calibri, Helvetica, Arial,
                        sans-serif !important ;
          font-size: 13.5px !important ;
          background: #FDF1DC !important ;
          padding: 0.6em !important ;
          padding-bottom: 0.5em !important ;
          border: 1px #DDD solid !important ;
          box-shadow: 0 0 1.5em #867453 !important ;
          /* We don't want the box-shadow in front of the bar divs. */
          position: relative !important ;
          z-index: 0 !important ;
          /* Leaving room for the two bars to protrude outwards */
          margin-left: 2px !important ;
          margin-right: 2px !important ;
          /* This is possibly overriden by next CSS rule. */
          width: 400px !important ;
          -webkit-columns: 400px !important ;
             -moz-columns: 400px !important ;
                  columns: 400px !important ;
          -webkit-column-gap: 40px !important ;
             -moz-column-gap: 40px !important ;
                  column-gap: 40px !important ;
          /* We can't use CSS3 attr() here because no browser currently supports it,
             but we can use a CSS custom property instead. */
          height: var(--data-content-height) !important ;
          /* When height is constrained, we want sequential filling of columns. */
          -webkit-column-fill: auto !important ;
             -moz-column-fill: auto !important ;
                  column-fill: auto !important ;
        }
        :host([data-two-column]) #content-wrap {
          /* One column is 400px and the gap between them is 40px. */
          width: 840px !important ;
        }
        ::slotted(h3) {
          border-bottom: 1px solid #7A200D !important ;
          color: #7A200D !important ;
          font-size: 21px !important ;
          font-variant: small-caps !important ;
          font-weight: normal !important ;
          letter-spacing: 1px !important ;
          margin: 0 !important ;
          margin-bottom: 0.3em !important ;
          break-inside: avoid-column !important ;
          break-after: avoid-column !important ;
        }
        /* For user-level p elems. */
        ::slotted(p) {
          margin-top: 0.3em !important ;
          margin-bottom: 0.9em !important ;
          line-height: 1.5 !important ;
        }
        /* Last child shouldn't have bottom margin, too much white space. */
        ::slotted(*:last-child) {
          margin-bottom: 0 !important ;
        }
      </style>
      <div class="bar"></div>
      <div id="content-wrap">
        <slot></slot>
      </div>
      <div class="bar"></div>
    </template><script>
      {
        let templateElement = document.getElementById('stat-block')
        createCustomElement('stat-block', templateElement.content)
      }
    </script><template id="creature-heading"><style>
        ::slotted(h1) {
          font-family: 'Libre Baskerville', 'Lora', 'Calisto MT',
                       'Bookman Old Style', Bookman, 'Goudy Old Style',
                       Garamond, 'Hoefler Text', 'Bitstream Charter',
                       Georgia, serif !important ;
          color: #7A200D !important ;
          font-weight: 700! important ;
          margin: 0px !important ;
          font-size: 23px !important ;
          letter-spacing: 1px !important ;
          font-variant: small-caps !important ;
        }
        ::slotted(h2) {
          font-weight: normal !important ;
          font-style: italic !important ;
          font-size: 12px !important ;
          margin: 0 !important ;
        }
      </style><slot></slot></template><script>
      {
        let templateElement = document.getElementById('creature-heading')
        createCustomElement('creature-heading', templateElement.content)
      }
    </script><template id="tapered-rule"><style>
        svg {
          fill: #922610 !important ;
          /* Stroke is necessary for good antialiasing in Chrome. */
          stroke: #922610 !important ;
          margin-top: 0.6em !important ;
          margin-bottom: 0.35em !important ;
        }
      </style><svg height="5" width="400">
        <polyline points="0,0 400,2.5 0,5"></polyline>
      </svg></template><script>
      {
        let templateElement = document.getElementById('tapered-rule')
        createCustomElement('tapered-rule', templateElement.content)
      }
    </script><template id="top-stats"><style>
        ::slotted(*) {
          color: #7A200D !important ;
        }
      </style><tapered-rule></tapered-rule><slot></slot><tapered-rule></tapered-rule></template><script>
      {
        let templateElement = document.getElementById('top-stats')
        createCustomElement('top-stats', templateElement.content)
      }
    </script><template id="abilities-block"><style>
        table {
          width: 100% !important ;
          border: 0px !important ;
          border-collapse: collapse !important ;
        }
        th, td {
          width: 50px !important ;
          text-align: center !important ;
        }
      </style><tapered-rule></tapered-rule>
      <table>
        <tbody>
          <tr>
            <th>STR</th>
            <th>DEX</th>
            <th>CON</th>
            <th>INT</th>
            <th>WIS</th>
            <th>CHA</th>
          </tr>
          <tr>
            <td id="str"></td>
            <td id="dex"></td>
            <td id="con"></td>
            <td id="int"></td>
            <td id="wis"></td>
            <td id="cha"></td>
          </tr>
        </tbody>
      </table>
      <tapered-rule></tapered-rule></template><script>
      {
        function abilityModifier(abilityScore) {
        let score = parseInt(abilityScore, 10)
        return Math.floor((score - 10) / 2)
      }
      function formattedModifier(abilityModifier) {
        if (abilityModifier >= 0) {
          return '+' + abilityModifier
        }
        // This is an en dash, NOT a "normal" dash. The minus sign needs to be more
        // visible.
        return 'â€“' + Math.abs(abilityModifier)
      }
      function abilityText(abilityScore) {
        return [String(abilityScore),
                ' (',
                formattedModifier(abilityModifier(abilityScore)),
                ')'].join('')
      }
      function elementClass(contentNode) {
        return class extends HTMLElement {
          constructor() {
            super()
            this.attachShadow({mode: 'open'})
              .appendChild(contentNode.cloneNode(true))
          }
          connectedCallback() {
            let root = this.shadowRoot
            for (let i = 0; i < this.attributes.length; i++) {
              let attribute = this.attributes[i]
              let abilityShortName = attribute.name.split('-')[1]
              root.getElementById(abilityShortName).textContent =
                 abilityText(attribute.value)
            }
          }
        }
      }
        let templateElement = document.getElementById('abilities-block')
        createCustomElement('abilities-block', templateElement.content, elementClass)
      }
    </script><template id="property-line"><style>
        :host {
          line-height: 1.4 !important ;
          display: block !important ;
          text-indent: -1em !important ;
          padding-left: 1em !important ;
        }
        ::slotted(h4) {
          margin: 0 !important ;
          display: inline !important ;
          font-weight: bold !important ;
        }
        ::slotted(p:first-of-type) {
          display: inline !important ;
          text-indent: 0 !important ;
        }
        ::slotted(p) {
          text-indent: 1em !important ;
          margin: 0 !important ;
        }
      </style><slot></slot></template><script>
      {
        let templateElement = document.getElementById('property-line')
        createCustomElement('property-line', templateElement.content)
      }
    </script><template id="property-block"><style>
        :host {
          margin-top: 0.3em !important ;
          margin-bottom: 0.9em !important ;
          line-height: 1.5 !important ;
          display: block !important ;
        }
        ::slotted(h4) {
          margin: 0 !important ;
          display: inline !important ;
          font-weight: bold !important ;
          font-style: italic !important ;
        }
        ::slotted(p:first-of-type) {
          display: inline !important ;
          text-indent: 0 !important ;
        }
        ::slotted(p) {
          text-indent: 1em !important ;
          margin: 0 !important ;
        }
      </style><slot></slot></template><script>
      {
        let templateElement = document.getElementById('property-block')
        createCustomElement('property-block', templateElement.content)
      }
    </script>

<h1 class="mt-5"><%= @item.name %></h1>
<small>stat block</small><br>

<%= render 'statblock' %>
<br>
<%= link_to 'Back', items_path %>
